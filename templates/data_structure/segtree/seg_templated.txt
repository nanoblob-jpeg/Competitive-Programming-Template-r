#include <vector>
using inside = int;
using segtree = std::vector<inside>;

inside merge(inside &a, inside &b){
	return {};
}

inside lazyup(insize &a, int val){
	return {};
}

void lazydown(v, l, r, seg);

void update(int v, int val, int l, int r, int lq, int rq, segtree &seg){
	if(l > r || lq > r || rq < l)
		return;
	else if(lq <= l && r <= rq){
		seg[v] = lazyup(seg[v], val);
	}else{
		int mid = l + (r-l)/2;
		lazydown(v, l, r, seg);
		update(v*2, val, l, mid, lq, rq, seg);
		update(v*2+1, val, mid+1, r, lq, rq, seg);
		seg[v][0] = merge(seg[v*2][0], seg[v*2+1][0]);
	}
}

void lazydown(int v, int l, int r, segtree &seg){
	return;
}

int query(int v, int l, int r, int lq, int rq, segtree &seg){
	if(l > r || lq > r || rq < l)
		return 0;
	else if(lq <= l && r <= rq)
		return seg[v];
	else{
		int mid = l + (r-l)/2;
		laxydown(v, l, r, seg);
		return merge(query(v*2, l, mid, lq, rq, seg), query(v*2+1, mid+1, r, lq, rq, seg));
	}
}

void build(segtree &seg, std::vector<int> &a){
	seg = segtree(a.size()*4);
	for(int i{}; i < a.size(); ++i){
		update(1, a[i], 0, a.size()-1, i, i, seg);
	}
}