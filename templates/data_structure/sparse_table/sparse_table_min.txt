#include <vector>
const int SPARSEMAXN = 200000;
const int SPARSEPOWT = 21;
// make sure 2^{sparse pow t} >= sparse max n
int sparse[SPARSEPOWT][SPARSEMAXN];
int pows[SPARSEMAXN+1];
void build(std::vector<int> &a){
    int n = a.size();
    pows[1] = 0;
    for(int i{2}; i <= n; ++i)
        pows[i] = pows[i/2]+1;
    for(int i{}; i < n; ++i)
        sparse[0][i] = a[i];

    for(int j{1}; j <= pows[n]; ++j){
        for(int i{}; i <= n-(1<<j); ++i){
            sparse[j][i] = min(sparse[j-1][i], sparse[j-1][i+(1<<(j-1))]);
        }
    }
}

int query(int l, int r){
    int len = r-l+1;
    int largestPow = pows[len];
    return min(sparse[largestPow][l],sparse[largestPow][r-(1<<largestPow)+1]);
}