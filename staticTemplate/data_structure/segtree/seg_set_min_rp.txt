#include <vector>
#include <array>
using segtree = std::vector<std::array<int, 2>>;
const int inff = 1e9;
void update(int v, int val, int l, int r, int lq, int rq, segtree &seg){
	if(l > r || lq > r || rq < l)
		return;
	else if(lq <= l && r <= rq){
		seg[v][0] = val;
		seg[v][1] = val;
	}else{
		int mid = l + (r-l)/2;
		if(seg[v][1] != inff){
			update(v*2, seg[v][1], l, mid, l, mid, seg);
			update(v*2+1, seg[v][1], mid+1, r, mid+1, r, seg);
			seg[v][1] = inff;
		}
		update(v*2, val, l, mid, lq, rq, seg);
		update(v*2+1, val, mid+1, r, lq, rq, seg);
		seg[v][0] = min(seg[v*2][0], seg[v*2+1][0]);
	}
}

int query(int v, int l, int r, int p, segtree &seg){
	if(l > r || p > r || p < l)
		return inff;
	else if(l == r && l == p)
		return seg[v][0];
	else{
		if(l == r)
			return inff;
		int mid = l + (r-l)/2;
		if(seg[v][1] != inff){
			update(v*2, seg[v][1], l, mid, l, mid, seg);
			update(v*2+1, seg[v][1], mid+1, r, mid+1, r, seg);
			seg[v][1] = inff;
			seg[v][0] = min(seg[v*2][0], seg[v*2+1][0]);
		}
		return query(v*2, l, mid, lq, rq, seg)+query(v*2+1, mid+1, r, lq, rq, seg);
	}
}

void build(segtree &seg, std::vector<int> &a){
	seg = segtree(a.size()*4);
	for(int i{}; i < a.size(); ++i){
		update(1, a[i], 0, a.size()-1, i, i, seg);
	}
}