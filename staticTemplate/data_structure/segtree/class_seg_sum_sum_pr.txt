#include <vector>
#include <array>
template <typename T>
class segtree{
public:
    T zero{};
    std::vector<T> seg;
    int boundl, boundr;
    segtree(long long length): seg(4*length){
        boundl = 0, boundr = length-1;
    }
    segtree(long long length, long long lbound, long long rbound) : seg(4*length){
        boundl = lbound, boundr = rbound;
    }
    segtree(std::vector<T> &val){
        seg = std::vector<T>(4*val.size());
        boundl = 0, boundr = val.size()-1;
        for(int i{}; i < val.size(); ++i)
            update(i, val[i]);
    }
    void update(int v, int val, int l, int r, int p){
        if(l > r || p > r || p < l)
            return;
        else if(l == r && l == p){
            seg[v] += val;
        }else{
            if(l == r)
                return;
            int mid = l + (r-l)/2;
            update(v*2, val, l, mid, p);
            update(v*2+1, val, mid+1, r, p);
            seg[v] = seg[v*2] + seg[v*2+1];
        }
    }
    void update(int p, int val){
        update(1, val, boundl, boundr, p);
    }

    T query(int v, int l, int r, int lq, int rq){
        if(l > r || lq > r || rq < l)
            return zero;
        else if(lq <= l && r <= rq)
            return seg[v];
        else{
            int mid = l + (r-l)/2;
            return query(v*2, l, mid, lq, rq) + query(v*2+1, mid+1, r, lq, rq);
        }
    }
    T query(int l, int r){
        return query(1, boundl, boundr, l, r);
    }
};
